name: build image
concurrency:
    cancel-in-progress: true
    group: ${{ github.workflow }}-${{ github.ref }}

on:
    pull_request:
        branches:
            - main
        paths:
            - "Dockerfile"
            - "docker-bake.hcl"
            - "env.sh"
    push:
        branches:
            - main
        paths:
            - "Dockerfile"
            - "docker-bake.hcl"
            - "env.sh"
    schedule:
        - cron: "0 7 * * *"
permissions:
    contents: read
env:
    IMAGE_NAME: "ghcr.io/prvious/frankenphp"

jobs:
    prepare:
        runs-on: ubuntu-24.04
        outputs:
            # Push if it's a scheduled job, a tag, or if we're committing to the main branch
            push: ${{ (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.version) || (github.ref == 'refs/heads/main' && github.event_name != 'pull_request')) && true || false }}
            variants: ${{ steps.matrix.outputs.variants }}
            platforms: ${{ steps.matrix.outputs.platforms }}
            metadata: ${{ steps.matrix.outputs.metadata }}
            php_version: ${{ steps.check.outputs.php_version }}
            latest_version: ${{ steps.check.outputs.latest_version }}
            skip: ${{ steps.check.outputs.skip }}

        steps:
            - name: Check PHP versions
              id: check
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  PHP_83_LATEST=$(skopeo inspect docker://docker.io/dunglas/frankenphp:php8.3 --override-os linux --override-arch amd64 | jq -r '.Env[] | select(test("^PHP_VERSION=")) | sub("^PHP_VERSION="; "")')
                  PHP_84_LATEST=$(skopeo inspect docker://docker.io/dunglas/frankenphp:php8.4 --override-os linux --override-arch amd64 | jq -r '.Env[] | select(test("^PHP_VERSION=")) | sub("^PHP_VERSION="; "")')
                  {
                    echo php_version="${PHP_83_LATEST},${PHP_84_LATEST}"
                    echo php83_version="${PHP_83_LATEST//./-}"
                    echo php84_version="${PHP_84_LATEST//./-}"
                    echo latest_version="${PHP_84_LATEST}"
                  } >> "${GITHUB_OUTPUT}"
                  # Check if the Docker images must be rebuilt
                  if [[ "${GITHUB_EVENT_NAME}" != "schedule"  ]]; then
                      echo skip=false >> "${GITHUB_OUTPUT}"
                      exit 0
                  fi
                  FRANKENPHP_83_LATEST=$(skopeo inspect docker://ghcr.io/prvious/frankenphp:php8.3 --override-os linux --override-arch amd64 | jq -r '.Env[] | select(test("^PHP_VERSION=")) | sub("^PHP_VERSION="; "")')
                  FRANKENPHP_84_LATEST=$(skopeo inspect docker://ghcr.io/prvious/frankenphp:php8.4 --override-os linux --override-arch amd64 | jq -r '.Env[] | select(test("^PHP_VERSION=")) | sub("^PHP_VERSION="; "")')
                  if [[ "${FRANKENPHP_83_LATEST}" == "${PHP_83_LATEST}" ]] && [[ "${FRANKENPHP_84_LATEST}" == "${PHP_84_LATEST}" ]]; then
                      echo skip=true >> "${GITHUB_OUTPUT}"
                      exit 0
                  fi

                  echo skip=false >> "${GITHUB_OUTPUT}"

            - uses: actions/checkout@v4
              if: ${{ !fromJson(steps.check.outputs.skip) }}

            - name: Set up Docker Buildx
              if: ${{ !fromJson(steps.check.outputs.skip) }}
              uses: docker/setup-buildx-action@v3

            - name: Create variants matrix
              if: ${{ !fromJson(steps.check.outputs.skip) }}
              id: matrix
              shell: bash
              run: |
                  set -e
                  # Print metadata for all targets so we capture all expanded runner-* targets
                  METADATA="$(docker buildx bake --print | jq -c)"
                  {
                    echo metadata="${METADATA}"
                    echo variants="$(jq -c '[.target | keys[] | select(startswith("runner-")) | sub("^runner-"; "")] | unique' <<< "${METADATA}")"
                    echo platforms="$(jq -c 'first(.target[]) | .platforms' <<< "${METADATA}")"
                  } >> "${GITHUB_OUTPUT}"
              env:
                  PHP_VERSION: ${{ steps.check.outputs.php_version }}
                  LATEST: ${{ steps.check.outputs.latest_version }}
    build:
        runs-on: ${{ startsWith(matrix.platform, 'linux/arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
        needs:
            - prepare
        permissions:
            contents: read
            packages: write
        if: ${{ !fromJson(needs.prepare.outputs.skip) }}
        strategy:
            fail-fast: false
            matrix:
                variant: ${{ fromJson(needs.prepare.outputs.variants) }}
                platform: ${{ fromJson(needs.prepare.outputs.platforms) }}
        steps:
            - name: Prepare
              id: prepare
              run: |
                  platform=${{ matrix.platform }}
                  echo "sanitized_platform=${platform//\//-}" >> "${GITHUB_OUTPUT}"

            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v3
              with:
                  platforms: ${{ matrix.platform }}

            - name: Login to ghcr.io
              if: fromJson(needs.prepare.outputs.push)
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build
              id: build
              uses: docker/bake-action@v6
              with:
                  push: ${{ fromJson(needs.prepare.outputs.push) }}
                  load: true
                  targets: runner-${{ matrix.variant }}
                  set: |
                      ${{ (github.event_name == 'pull_request') && '*.args.NO_COMPRESS=1' || '' }}
                      ${{ fromJson(needs.prepare.outputs.push) && '*.tags=' || '' }}
                      *.platform=${{ matrix.platform }}
                      *.cache-from=type=gha,scope=${{ matrix.variant }}-${{ github.ref }}-${{ matrix.platform }}
                      *.cache-from=type=gha,scope=${{ matrix.variant }}-${{ github.ref }}
                      *.cache-from=type=gha,scope=${{ matrix.variant }}-refs/heads/main-${{ matrix.platform }}
                      *.cache-from=type=gha,scope=${{ matrix.variant }}-refs/heads/main
                      *.cache-from=type=gha,scope=${{ matrix.variant }}-${{ matrix.platform }}
                      *.cache-from=type=gha,scope=${{ matrix.variant }}
                      *.cache-from=type=gha,scope=base-${{ matrix.platform }}
                      *.cache-from=type=gha,scope=base
                      *.cache-to=type=gha,scope=${{ matrix.variant }}-${{ github.ref }}-${{ matrix.platform }},mode=max,ignore-error=true
                      *.cache-to=type=gha,scope=${{ matrix.variant }}-${{ github.ref }},mode=max,ignore-error=true
                      *.cache-to=type=gha,scope=base-${{ matrix.platform }},mode=max,ignore-error=true
                      *.cache-to=type=gha,scope=base,mode=max,ignore-error=true
                      ${{ fromJson(needs.prepare.outputs.push) && format('*.output=type=image,name={0},push-by-digest=true,name-canonical=true,push=true', env.IMAGE_NAME) || '' }}
              env:
                  PHP_VERSION: ${{ needs.prepare.outputs.php_version }}
                  LATEST: ${{ needs.prepare.outputs.latest_version }}

            - name: Export image as tarball
              run: |
                  # Get the built image name from bake metadata
                  IMAGE_NAME=$(docker buildx bake runner-${{ matrix.variant }} --print | jq -r '.target."runner-${{ matrix.variant }}".tags[0]')
                  echo "Exporting image: ${IMAGE_NAME}"

                  # List all available images for debugging
                  echo "Available images:"
                  docker images

                  # Verify the image exists locally
                  if ! docker image inspect "${IMAGE_NAME}" > /dev/null 2>&1; then
                      echo "Error: Image ${IMAGE_NAME} not found locally!"
                      echo "Available images:"
                      docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}"
                      exit 1
                  fi

                  # Create directory for image export
                  mkdir -p /tmp/images

                  # Export the image as a tarball
                  docker save "${IMAGE_NAME}" > "/tmp/images/runner-${{ matrix.variant }}-${{ steps.prepare.outputs.sanitized_platform }}.tar"

                  # Compress the tarball
                  gzip "/tmp/images/runner-${{ matrix.variant }}-${{ steps.prepare.outputs.sanitized_platform }}.tar"

                  # Verify the tarball was created and is valid
                  TARBALL="/tmp/images/runner-${{ matrix.variant }}-${{ steps.prepare.outputs.sanitized_platform }}.tar.gz"
                  ls -lh "${TARBALL}"

                  # Test that the tarball is valid
                  echo "Testing tarball integrity..."
                  gunzip -t "${TARBALL}"
                  echo "Tarball is valid!"
              env:
                  PHP_VERSION: ${{ needs.prepare.outputs.php_version }}
                  LATEST: ${{ needs.prepare.outputs.latest_version }}

            - name: Upload image artifact
              uses: actions/upload-artifact@v4
              with:
                  name: image-runner-${{ matrix.variant }}-${{ steps.prepare.outputs.sanitized_platform }}
                  path: /tmp/images/runner-${{ matrix.variant }}-${{ steps.prepare.outputs.sanitized_platform }}.tar.gz
                  retention-days: 1
                  compression-level: 0 # Image is already compressed

            - # Workaround for https://github.com/actions/runner/pull/2477#issuecomment-1501003600
              name: Export metadata
              if: fromJson(needs.prepare.outputs.push)
              run: |
                  mkdir -p /tmp/metadata/runner
                  runnerDigest=$(jq -r '."runner-${{ matrix.variant }}"."containerimage.digest"' <<< "${METADATA}")
                  touch "/tmp/metadata/runner/${runnerDigest#sha256:}"
              env:
                  METADATA: ${{ steps.build.outputs.metadata }}

            - name: Upload runner metadata
              if: fromJson(needs.prepare.outputs.push)
              uses: actions/upload-artifact@v4
              with:
                  name: metadata-runner-${{ matrix.variant }}-${{ steps.prepare.outputs.sanitized_platform }}
                  path: /tmp/metadata/runner/*
                  if-no-files-found: error
                  retention-days: 1

    test:
        runs-on: ${{ startsWith(matrix.platform, 'linux/arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
        needs:
            - prepare
            - build
        if: ${{ !fromJson(needs.prepare.outputs.skip) }}
        strategy:
            fail-fast: false
            matrix:
                variant: ${{ fromJson(needs.prepare.outputs.variants) }}
                platform: ${{ fromJson(needs.prepare.outputs.platforms) }}
        steps:
            - name: Prepare
              id: prepare
              run: |
                  platform=${{ matrix.platform }}
                  echo "sanitized_platform=${platform//\//-}" >> "${GITHUB_OUTPUT}"

            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Download built image
              uses: actions/download-artifact@v4
              with:
                  name: image-runner-${{ matrix.variant }}-${{ steps.prepare.outputs.sanitized_platform }}
                  path: /tmp/images

            - name: Load image from tarball
              run: |
                  TARBALL="/tmp/images/runner-${{ matrix.variant }}-${{ steps.prepare.outputs.sanitized_platform }}.tar.gz"

                  echo "Loading image from tarball: ${TARBALL}"

                  # Verify tarball exists and has reasonable size
                  if [[ ! -f "${TARBALL}" ]]; then
                      echo "Error: Tarball not found!"
                      ls -la /tmp/images/
                      exit 1
                  fi

                  # Check tarball size (should be > 100MB for a real image)
                  SIZE=$(stat -f%z "${TARBALL}" 2>/dev/null || stat -c%s "${TARBALL}")
                  echo "Tarball size: $((SIZE / 1024 / 1024))MB"

                  if [[ $SIZE -lt 10485760 ]]; then  # Less than 10MB
                      echo "Warning: Tarball seems too small (${SIZE} bytes)"
                  fi

                  # Test tarball integrity first
                  echo "Testing tarball integrity..."
                  if ! gunzip -t "${TARBALL}"; then
                      echo "Error: Tarball is corrupted!"
                      exit 1
                  fi

                  # Load the image
                  echo "Loading image into Docker..."
                  gunzip -c "${TARBALL}" | docker load

                  # Verify images were loaded
                  echo "Images loaded successfully:"
                  docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.Size}}"

            - name: Test image environment
              run: |
                  # Get the built image name
                  if [[ "${{ matrix.variant }}" == *"-dev" ]]; then
                      ENV_TYPE="dev"
                  else
                      ENV_TYPE="production"
                  fi
                    
                  IMAGE_NAME=$(docker buildx bake runner-${{ matrix.variant }} --print | jq -r '.target."runner-${{ matrix.variant }}".tags[0]')

                  echo "🧪 Testing ${ENV_TYPE} environment in image: ${IMAGE_NAME}"

                  # Run our test script inside the container
                  docker run --rm -v "$PWD/test.php:/test.php:ro" "${IMAGE_NAME}" php /test.php "${ENV_TYPE}"
              env:
                  PHP_VERSION: ${{ needs.prepare.outputs.php_version }}
                  LATEST: ${{ needs.prepare.outputs.latest_version }}

    push:
        runs-on: ubuntu-24.04
        needs:
            - prepare
            - build
            - test
        if: fromJson(needs.prepare.outputs.push)
        permissions:
            contents: read
            packages: write
        strategy:
            fail-fast: false
            matrix:
                variant: ${{ fromJson(needs.prepare.outputs.variants) }}
                target: ["runner"]
        steps:
            - name: Download metadata
              uses: actions/download-artifact@v4
              with:
                  pattern: metadata-${{ matrix.target }}-${{ matrix.variant }}-*
                  path: /tmp/metadata
                  merge-multiple: true

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to DockerHub
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Create manifest list and push
              working-directory: /tmp/metadata
              run: |
                  set -x
                  # shellcheck disable=SC2046,SC2086
                  docker buildx imagetools create $(jq -cr '.target."${{ matrix.target }}-${{ matrix.variant }}".tags | map("-t " + .) | join(" ")' <<< ${METADATA}) \
                    $(printf "${IMAGE_NAME}@sha256:%s " *)
              env:
                  METADATA: ${{ needs.prepare.outputs.metadata }}

            - name: Inspect image
              run: |
                  # shellcheck disable=SC2046,SC2086
                  docker buildx imagetools inspect $(jq -cr '.target."${{ matrix.target }}-${{ matrix.variant }}".tags | first' <<< ${METADATA})
              env:
                  METADATA: ${{ needs.prepare.outputs.metadata }}
